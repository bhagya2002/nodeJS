* Fullstack web development
    - Frontend / Client side
        - HTML, CSS, JS
    - Backend / Server side
        - Node.js, Python , Ruby, ASP.NET, PHP


    * Fullstack architecture
        - Presentation Layer: UI aspect of the application
        - Business Logic Layer: Logic and data processing
        - Data Access Layer: Data storage and retrieval (API)


* Node.js


* NPM: manages an ecosystem of node modules


* node run time:
    - manages the execution of code
    - asychronously executes code 
        - multiple tasks happen and the ones that come later go into a callback
        - callback is a function that is called when the code is finished (request queue is empty)
        

* Client and Server side
    - Client side: browser
    - Server side: server

    - client-server comms are done through HTTP with REST API that connects to the cloud (server backend and database link)

* Protocol's
    * HTTP: Hypertext Transfer Protocol
        - used to transfer data between client and server
        - retrieval of interlinked text documents (Hypertext)
        - used to transfer data between client and server
            - HEAD, GET, POST, PUT, DELETE, etc..

        - you send a URL to the WEB SERVER then the WEB SERVER sends you a response which is found from the data centers in HTML/CSS/JS


    * URL: Uniform Resource Locator
        - identifies a resource on the web


    * JSON: JavaScript Object Notation
        - used to transfer data between client and server
        - encoding data to ship over the web


    * XML: eXtensible Markup Language
        - used to transfer data between client and server


    * SOAP: Simple Object Access Protocol
        - comms between distributed entities


    * REST: Representational State Transfer
        - state transfer


    * RESTful: RESTful web services
        - RESTful web services are web services that use the HTTP protocol to communicate with a server


* Client-Server comms
    - unexpected response/responce
    - asychronous nature of comms
        - not instant, takes time

    - status codes tell you what is wrong or right
        - 200: everything is good
        - 300: redirect
        - 400: is bad
        - 500: internal server error
            - 200: everything is good
            - 404: page not found
            - 500: server error

    - server's can format the data in XML or JSON

    * JSON
        - langauge independent

* Node and HTTP Modules (building a HTTP server using Node)
    - const http = require('http');
    - const server = http.createServer(function(req, res) {});
    - server.listen(port, ...)

* Express Server
    - fast, minimalist web framwork for Node.js
    - used to build a RESTful API
    - robust set of features
    - third party middleware to extend functionality

    - npm install express --save

    * morgan server
        - middleware that logs HTTP requests
        - npm install morgan --save

* package.json
    * dependencies
        - what packages are installed in the current project
    * scripts
        - what scripts are run when you run npm run <script>

* Web services
    - system designed to support ineroperability of systems connected over the internet
    - Service oriented architecture (SOA)
    - way for two devices to connect over web apps

    * SOAP (Simple Object Access Protocol)
        - XML based service

    * REST (Representational State Transfer)
        - uses web standards
        - exchange of data using either XML or json
        - uses HTTP protocol
        - stateless: does not remember state after a request
        - URIs are used to identify end points

    * Verbs
        - Get -> read data from a resource
            - used by clients to request for resources
        - Post -> create a new resource
        - Put -> update an existing resource
        - Delete -> delete a resource

    * Stateless Servers
        - server side should not track client state, every request is new
            - stateless makes it scaleable
        - client side should track own state (cookies, databases, etc.)


